name: CI Pipeline

on:
  push:
    branches:
      - main

jobs:
  # === Test stage ===
  sast:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # GitHub không có template SAST như GitLab
      # => bạn có thể thêm tool scan bảo mật riêng (npm audit, snyk...)

  # === Build Test stage ===
  buildTest:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    container: node:22-alpine3.18
    steps:
      - uses: actions/checkout@v3

      - name: Setup cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: |
          echo "${{ secrets.DEPLOY_TEST_ENV }}" > .env

      - name: Save build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: nuxt-build
          path: |
            .nuxt/

  # === Deploy Test stage ===
  deployTest:
    runs-on: ubuntu-latest
    needs: buildTest
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: nuxt-build

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p 24700 -H "${{ secrets.TEST_INSTANCE_IP }}" >> ~/.ssh/known_hosts
          echo "${{ secrets.DEPLOY_TEST_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "${{ secrets.DEPLOY_TEST_ENV }}" > .env

      - name: Deploy via rsync + ssh
        run: |
          sudo apt-get update && sudo apt-get install -y rsync
          echo "Verifying resource files before transfer:"
          ls -la resource/ || echo "Local resource/ directory doesn't exist!"

          rsync --progress -avzh --exclude='.git' -e "ssh -i ~/.ssh/id_rsa -p 24700" --rsync-path="sudo rsync" . "root@${{ secrets.TEST_INSTANCE_IP }}:~/newApp/${{ secrets.APP_NAME }}"

          ssh -i ~/.ssh/id_rsa -p 24700 root@${{ secrets.TEST_INSTANCE_IP }} "sudo mv ~/apps/${{ secrets.APP_NAME }} ~/tmpApp/${{ secrets.APP_NAME }}"
          ssh -i ~/.ssh/id_rsa -p 24700 root@${{ secrets.TEST_INSTANCE_IP }} "sudo mv ~/newApp/${{ secrets.APP_NAME }} ~/apps/${{ secrets.APP_NAME }}"
          ssh -i ~/.ssh/id_rsa -p 24700 root@${{ secrets.TEST_INSTANCE_IP }} "sudo rm -rf ~/tmpApp/${{ secrets.APP_NAME }}"
          ssh -i ~/.ssh/id_rsa -p 24700 root@${{ secrets.TEST_INSTANCE_IP }} "sudo chmod -R ug+w ~/apps/${{ secrets.APP_NAME }}"
          ssh -i ~/.ssh/id_rsa -p 24700 root@${{ secrets.TEST_INSTANCE_IP }} "sudo chown -R $USER:www-data ~/apps/${{ secrets.APP_NAME }}"
          ssh -i ~/.ssh/id_rsa -p 24700 root@${{ secrets.TEST_INSTANCE_IP }} "cp ~/docker/Dockerfile.${{ secrets.APP_NAME }}.txt ~/apps/${{ secrets.APP_NAME }}/Dockerfile"
          ssh -i ~/.ssh/id_rsa -p 24700 root@${{ secrets.TEST_INSTANCE_IP }} "docker compose restart ${{ secrets.APP_NAME }}-app"
